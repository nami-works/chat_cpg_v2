name: Cursor AI Development Workflow

on:
  workflow_dispatch:
    inputs:
      prepare_tasks:
        description: 'Prepare next tasks for Cursor AI'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  prepare-cursor-tasks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.AI_GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r automation/requirements_cursor.txt
    
    - name: Configure Git
      run: |
        git config --local user.email "cursor-ai@chatcpg.com"
        git config --local user.name "Cursor AI Bot"
    
    - name: Generate Task Summary
      run: |
        python -c "
        import json
        from datetime import datetime
        from pathlib import Path
        
        # Load development plan
        with open('development_plan.json', 'r') as f:
            plan = json.load(f)
        
        # Count tasks
        total_tasks = 0
        pending_tasks = 0
        completed_tasks = 0
        
        for phase in plan['phases']:
            for task in phase['tasks']:
                total_tasks += 1
                if task.get('status') == 'pending':
                    pending_tasks += 1
                elif task.get('status') == 'completed':
                    completed_tasks += 1
        
        # Create summary
        summary = f'''# ðŸŽ¯ Cursor AI Development Summary
        
        **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
        
        ## ðŸ“Š Project Overview
        - **Project:** {plan['project']}
        - **Version:** {plan['version']}
        - **Total Tasks:** {total_tasks}
        - **Completed Tasks:** {completed_tasks}
        - **Pending Tasks:** {pending_tasks}
        - **Progress:** {(completed_tasks/total_tasks*100):.1f}%
        
        ## ðŸš€ Next Steps for Cursor AI Development
        
        1. **Clone the repository locally**
        2. **Run the Cursor AI developer:**
           ```bash
           cd chatcpg_v2/automation
           python cursor_ai_developer.py
           ```
        3. **Follow the interactive prompts** to implement tasks
        4. **Use your Cursor AI subscription** - No OpenAI costs!
        
        ## ðŸ“‹ Pending Tasks
        '''
        
        # List pending tasks
        for phase in plan['phases']:
            phase_has_pending = False
            for task in phase['tasks']:
                if task.get('status') == 'pending':
                    if not phase_has_pending:
                        summary += f'\\n### {phase[\"name\"]}\\n'
                        phase_has_pending = True
                    summary += f'- **{task[\"name\"]}** ({task[\"id\"]})\\n'
                    summary += f'  - {task[\"description\"]}\\n'
        
        summary += f'''
        ## ðŸ’° Cost Savings
        - **OpenAI API Costs:** $0 (eliminated!)
        - **Uses:** Your existing Cursor AI subscription
        - **Annual Savings:** $7,300 - $18,250
        
        Ready to develop with zero API costs!
        '''
        
        # Save summary
        with open('CURSOR_DEVELOPMENT_READY.md', 'w') as f:
            f.write(summary)
        
        print('âœ… Cursor AI development summary generated')
        print(f'ðŸ“Š Progress: {completed_tasks}/{total_tasks} tasks completed')
        print('ðŸ’° Zero OpenAI costs - uses your Cursor AI subscription!')
        "
    
    - name: Commit summary
      run: |
        git add CURSOR_DEVELOPMENT_READY.md
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Cursor AI: Updated development summary [$(date +'%Y-%m-%d %H:%M')]"
          git push origin main
          echo "Development summary updated"
        fi
    
    - name: Upload development summary
      uses: actions/upload-artifact@v4
      with:
        name: cursor-ai-development-summary
        path: CURSOR_DEVELOPMENT_READY.md
        retention-days: 30

  update-readme:
    runs-on: ubuntu-latest
    needs: prepare-cursor-tasks
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.AI_GITHUB_TOKEN }}
    
    - name: Update README with Cursor status
      run: |
        python -c "
        import json
        from datetime import datetime
        
        # Load development plan
        with open('development_plan.json', 'r') as f:
            plan = json.load(f)
        
        # Calculate progress
        total_tasks = 0
        completed_tasks = 0
        
        for phase in plan['phases']:
            for task in phase['tasks']:
                total_tasks += 1
                if task.get('status') == 'completed':
                    completed_tasks += 1
        
        completion_percentage = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        
        # Create status badges
        status_info = f'''
        <!-- Cursor AI Development Status -->
        ![Development Progress](https://img.shields.io/badge/Progress-{completion_percentage:.0f}%25-{'green' if completion_percentage > 80 else 'yellow' if completion_percentage > 50 else 'red'})
        ![Zero Cost](https://img.shields.io/badge/OpenAI_Cost-$0-green)
        ![Cursor AI](https://img.shields.io/badge/Powered_by-Cursor_AI-blue)
        ![Tasks Completed](https://img.shields.io/badge/Completed-{completed_tasks}/{total_tasks}-success)
        ![Last Updated](https://img.shields.io/badge/Updated-{datetime.now().strftime('%Y---%m---%d')}-lightgrey)
        '''
        
        print('âœ… Cursor AI status badges updated')
        print(f'ðŸ“Š Progress: {completion_percentage:.1f}%')
        print('ðŸ’° Zero OpenAI costs!')
        " 